# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    
    #Deserializer Service
    AppBundle\Serializer\DoctrineEntityDeserializationSuscriber:
        tags: ['jms_serializer.event_subscriber']
        public: true
        
    # Añadir como servicio el Predis para     
    Predis\Client: '@snc_redis.default'
   
        
    AppBundle\Controller\ImageController:
        class: AppBundle\Controller\ImageController
        arguments: 
            - '@AppBundle\Repository\ImageRepository'
            - '%image_directory%'
            - '%images_base_url%'
            
    AppBundle\DataFixtures\ORM\Processor\UserProcessor:
        tags: [ { name: fidry_alice_data_fixtures.processor } ]
        
    # Repository Services
    AppBundle\Repository\MovieRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\Movie
    
    AppBundle\Repository\RoleRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\Role
    
    AppBundle\Repository\UserRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\User
            
    AppBundle\Repository\PersonRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\Person
        
    AppBundle\Repository\ImageRepository:
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - AppBundle\Entity\Image
        
            
#### AÑADIR SERVICIOS ####
# Para añadir servicios hay que poner la class por ejemplo en el caso de Predis\Client, daba error, se pone el servicio al igual que esta en controllador
# o en la class (use {class} y se añade aqui con el '@{nombre}' o con ['{nombre}'] al igual que esta puesto en config.yml